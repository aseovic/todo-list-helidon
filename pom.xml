<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (c) 2020, 2022 Oracle and/or its affiliates.
  Licensed under the Universal Permissive License v 1.0 as shown at
  https://oss.oracle.com/licenses/upl.
-->

<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>io.helidon.applications</groupId>
    <artifactId>helidon-mp</artifactId>
    <version>2.5.1</version>
    <relativePath/>
  </parent>

  <groupId>com.oracle.coherence.examples</groupId>
  <artifactId>todo-list-helidon-server</artifactId>
  <version>22.06.1</version>

  <properties>
    <coherence.groupId>com.oracle.coherence.ce</coherence.groupId>
    <coherence.version>${project.version}</coherence.version>

    <version.plugin.jib>3.2.1</version.plugin.jib>
  </properties>

  <dependencies>
    <!-- Helidon dependencies-->
    <dependency>
      <groupId>io.helidon.microprofile.bundles</groupId>
      <artifactId>helidon-microprofile</artifactId>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.media</groupId>
      <artifactId>jersey-media-json-binding</artifactId>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.media</groupId>
      <artifactId>jersey-media-sse</artifactId>
    </dependency>
    <dependency>
      <groupId>io.helidon.tracing</groupId>
      <artifactId>helidon-tracing-jaeger</artifactId>
    </dependency>
    <dependency>
      <groupId>io.helidon.microprofile.grpc</groupId>
      <artifactId>helidon-microprofile-grpc-server</artifactId>
    </dependency>
    <dependency>
      <groupId>io.helidon.microprofile.graphql</groupId>
      <artifactId>helidon-microprofile-graphql-server</artifactId>
    </dependency>

    <!-- Coherence dependencies -->
    <dependency>
      <groupId>${coherence.groupId}</groupId>
      <artifactId>coherence-cdi-server</artifactId>
      <version>${coherence.version}</version>
    </dependency>
    <dependency>
      <groupId>${coherence.groupId}</groupId>
      <artifactId>coherence-mp-config</artifactId>
      <version>${coherence.version}</version>
    </dependency>

  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.jboss.jandex</groupId>
        <artifactId>jandex-maven-plugin</artifactId>
        <version>1.0.6</version>
        <executions>
          <execution>
            <id>make-index</id>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.6.0</version>
        <configuration>
          <executable>java</executable>
          <arguments>
            <argument>-Dcoherence.metrics.http.enabled=true</argument>
            <argument>-classpath</argument>
            <classpath/>
            <argument>io.helidon.microprofile.cdi.Main</argument>
          </arguments>
        </configuration>
      </plugin>

    </plugins>
  </build>

  <profiles>
    <!--
      Creates a single architecture image (based on the build machine architecture)
      and publishes it to a local Docker daemon
    -->
    <profile>
      <id>docker</id>
      <build>
        <plugins>
          <plugin>
            <groupId>com.google.cloud.tools</groupId>
            <artifactId>jib-maven-plugin</artifactId>
            <version>${version.plugin.jib}</version>
            <configuration>
              <from>
                <image>
                  gcr.io/distroless/java11-debian11
                </image>
              </from>
              <to>
                <image>ghcr.io/coherence-community/${project.artifactId}</image>
                <tags>
                  <tag>${project.version}</tag>
                </tags>
              </to>
              <container>
                <ports>
                  <port>1408</port>
                  <port>7001</port>
                  <port>9612</port>
                </ports>
                <creationTime>USE_CURRENT_TIMESTAMP</creationTime>
              </container>
              <containerizingMode>packaged</containerizingMode>
            </configuration>
            <executions>
              <execution>
                <goals>
                  <goal>dockerBuild</goal>
                </goals>
                <phase>package</phase>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
